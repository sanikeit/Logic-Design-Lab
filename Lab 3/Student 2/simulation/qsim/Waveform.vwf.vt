// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/04/2021 12:47:08"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ASU_updated
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ASU_updated_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CONTROL;
reg [3:0] X;
reg [3:0] Y;
// wires                                               
wire A;
wire B;
wire C;
wire Cout;
wire D;
wire OVERFLOW;

// assign statements (if any)                          
ASU_updated i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.CONTROL(CONTROL),
	.Cout(Cout),
	.D(D),
	.OVERFLOW(OVERFLOW),
	.X(X),
	.Y(Y)
);
initial 
begin 
#1000000 $finish;
end 

// CONTROL
initial
begin
	CONTROL = 1'b0;
	CONTROL = #640000 1'b1;
end 
// X[ 3 ]
initial
begin
	X[3] = 1'b0;
end 
// X[ 2 ]
initial
begin
	X[2] = 1'b0;
	X[2] = #640000 1'b1;
end 
// X[ 1 ]
initial
begin
	X[1] = 1'b0;
	X[1] = #320000 1'b1;
	X[1] = #320000 1'b0;
	X[1] = #320000 1'b1;
end 
// X[ 0 ]
initial
begin
	repeat(3)
	begin
		X[0] = 1'b0;
		X[0] = #160000 1'b1;
		# 160000;
	end
	X[0] = 1'b0;
end 
// Y[ 3 ]
initial
begin
	repeat(6)
	begin
		Y[3] = 1'b0;
		Y[3] = #80000 1'b1;
		# 80000;
	end
	Y[3] = 1'b0;
end 
// Y[ 2 ]
initial
begin
	repeat(12)
	begin
		Y[2] = 1'b0;
		Y[2] = #40000 1'b1;
		# 40000;
	end
	Y[2] = 1'b0;
end 
// Y[ 1 ]
always
begin
	Y[1] = 1'b0;
	Y[1] = #20000 1'b1;
	#20000;
end 
// Y[ 0 ]
always
begin
	Y[0] = 1'b0;
	Y[0] = #10000 1'b1;
	#10000;
end 
endmodule

